"""
Utility script to analyze chapter state files generated by the chapter generator.

This script loads a state file generated by the chapter generator and provides
various analysis options.

Usage:
    python tests/simulations/analyze_chapter_state.py [--file FILE_PATH] [--latest]
"""

import argparse
import json
import os
import sys
import glob
from datetime import datetime
from collections import Counter
from typing import Dict, List, Any, Optional

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

# Import app components
from app.models.story import AdventureState, ChapterType


def get_latest_state_file() -> str:
    """Get the path to the most recent state file."""
    state_files = glob.glob("logs/simulations/simulation_state_*.json")
    if not state_files:
        raise FileNotFoundError("No state files found")
    return max(state_files, key=os.path.getctime)


def load_state_file(file_path: str) -> Dict[str, Any]:
    """Load a state file and return the parsed JSON."""
    with open(file_path, "r") as f:
        return json.load(f)


def print_chapter_summary(state_data: Dict[str, Any]) -> None:
    """Print a summary of the chapters in the state file."""
    chapters = state_data.get("chapters", [])

    print(f"\n=== Chapter Summary ({len(chapters)} chapters) ===")

    # Count chapter types
    chapter_types = Counter([ch.get("chapter_type", "unknown") for ch in chapters])
    print("\nChapter Types:")
    for chapter_type, count in chapter_types.items():
        print(f"  {chapter_type}: {count}")

    # Print chapter details
    print("\nChapter Details:")
    for i, chapter in enumerate(chapters, 1):
        chapter_type = chapter.get("chapter_type", "unknown")
        content_length = len(chapter.get("content", ""))
        has_response = "response" in chapter and chapter["response"] is not None

        print(f"  Chapter {i} ({chapter_type}):")
        print(f"    Content length: {content_length} chars")
        print(f"    Has response: {has_response}")

        # Print question info for lesson chapters
        if chapter_type == "lesson" and "question" in chapter and chapter["question"]:
            question = chapter["question"]
            print(f"    Question: {question.get('question', '')[:50]}...")
            print(f"    Topic: {question.get('topic', '')}")

            # Print response info if available
            if has_response:
                response = chapter["response"]
                is_correct = response.get("is_correct", False)
                chosen_answer = response.get("chosen_answer", "")
                print(f"    Answer correct: {is_correct}")
                print(f"    Chosen answer: {chosen_answer[:50]}...")


def print_chapter_summaries(state_data: Dict[str, Any]) -> None:
    """Print the chapter summaries from the state file."""
    chapter_summaries = state_data.get("chapter_summaries", [])

    if not chapter_summaries:
        print("\nNo chapter summaries found in the state file.")
        return

    print(f"\n=== Chapter Summaries ({len(chapter_summaries)} summaries) ===")

    for i, summary in enumerate(chapter_summaries, 1):
        print(f"\nChapter {i} Summary:")
        print(f"  {summary}")


def print_simulation_metadata(state_data: Dict[str, Any]) -> None:
    """Print the simulation metadata from the state file."""
    metadata = state_data.get("simulation_metadata", {})

    if not metadata:
        print("\nNo simulation metadata found in the state file.")
        return

    print("\n=== Simulation Metadata ===")
    print(f"  Run ID: {metadata.get('run_id', 'unknown')}")
    print(f"  Timestamp: {metadata.get('timestamp', 'unknown')}")

    # Print random choices
    random_choices = metadata.get("random_choices", [])
    print(f"\nRandom Choices ({len(random_choices)} choices):")

    for i, choice in enumerate(random_choices, 1):
        chapter_number = choice.get("chapter_number", i)
        choice_text = choice.get("choice_text", "")
        choice_id = choice.get("choice_id", "")

        print(f"  Chapter {chapter_number}:")
        print(
            f"    Text: {choice_text[:50]}..."
            if len(choice_text) > 50
            else f"    Text: {choice_text}"
        )
        print(f"    ID: {choice_id}")


def print_educational_stats(state_data: Dict[str, Any]) -> None:
    """Print educational statistics from the state file."""
    chapters = state_data.get("chapters", [])

    # Filter lesson chapters
    lesson_chapters = [ch for ch in chapters if ch.get("chapter_type") == "lesson"]

    if not lesson_chapters:
        print("\nNo lesson chapters found in the state file.")
        return

    print(f"\n=== Educational Statistics ({len(lesson_chapters)} lesson chapters) ===")

    # Count correct answers
    correct_answers = sum(
        1
        for ch in lesson_chapters
        if "response" in ch
        and ch["response"]
        and ch["response"].get("is_correct", False)
    )

    print(f"  Total lesson chapters: {len(lesson_chapters)}")
    print(f"  Correct answers: {correct_answers}")
    print(f"  Success rate: {correct_answers / len(lesson_chapters) * 100:.1f}%")

    # Group by topic
    topics = Counter(
        [ch.get("question", {}).get("topic", "unknown") for ch in lesson_chapters]
    )

    print("\nTopics:")
    for topic, count in topics.items():
        print(f"  {topic}: {count} questions")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Analyze chapter state files")
    parser.add_argument("--file", type=str, help="Path to state file")
    parser.add_argument(
        "--latest", action="store_true", help="Use the latest state file"
    )
    parser.add_argument("--summary", action="store_true", help="Print chapter summary")
    parser.add_argument(
        "--summaries", action="store_true", help="Print chapter summaries"
    )
    parser.add_argument(
        "--metadata", action="store_true", help="Print simulation metadata"
    )
    parser.add_argument(
        "--stats", action="store_true", help="Print educational statistics"
    )
    parser.add_argument("--all", action="store_true", help="Print all information")

    args = parser.parse_args()

    # Determine which file to use
    file_path = None
    if args.file:
        file_path = args.file
    elif args.latest:
        try:
            file_path = get_latest_state_file()
            print(f"Using latest state file: {file_path}")
        except FileNotFoundError as e:
            print(f"Error: {e}")
            return
    else:
        try:
            file_path = get_latest_state_file()
            print(f"No file specified, using latest state file: {file_path}")
        except FileNotFoundError:
            print("Error: No state files found. Please specify a file with --file.")
            return

    # Load the state file
    try:
        state_data = load_state_file(file_path)
        print(f"Loaded state file: {file_path}")
    except Exception as e:
        print(f"Error loading state file: {e}")
        return

    # Determine which information to print
    if args.all or not any([args.summary, args.summaries, args.metadata, args.stats]):
        print_chapter_summary(state_data)
        print_chapter_summaries(state_data)
        print_simulation_metadata(state_data)
        print_educational_stats(state_data)
    else:
        if args.summary:
            print_chapter_summary(state_data)
        if args.summaries:
            print_chapter_summaries(state_data)
        if args.metadata:
            print_simulation_metadata(state_data)
        if args.stats:
            print_educational_stats(state_data)


if __name__ == "__main__":
    main()
