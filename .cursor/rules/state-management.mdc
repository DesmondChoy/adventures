---
description: Maintain Centralized State Management via AdventureState
globs: 
---

# State Management Rules: Centralized AdventureState

## Overview

User choices and responses to educational questions are the primary drivers of state transitions. The `AdventureState` class, defined in `app/models/story.py`, acts as the single source of truth for the application's state. All state changes must be managed through this class. The `ChapterType` enum, also defined in `app/models/story.py`, is the *authoritative* source for determining whether a chapter is a `STORY` or `LESSON` chapter.

## Chapter Type Determination

The adventure begins when a user selects their adventure category and lesson topic and clicks the start adventure button. From this point forward, each chapter in the adventure must be either a `STORY` or `LESSON` type, with distinct characteristics:

### Story Chapters (`ChapterType.STORY`)
* End with exactly three narrative choices (# of choices might change in future)
* Choices represent different paths the story can take
* No correct or wrong answers - all choices are valid narrative decisions
* Choices affect the story's direction and future content
* Response is captured in `StoryResponse` model

### Lesson Chapters (`ChapterType.LESSON`)
* End with an educational question related to the lesson topic
* Have multiple possible answers, with exactly one correct answer
* Responses affect the educational progression tracking
* Question and response captured in `LessonResponse` model

The determination of a chapter's type is a fundamental aspect of the application's architecture and must be explicitly set when generating new chapters. This typing system ensures:
1. Clear separation between narrative progression and educational content
2. Proper validation of chapter content and responses
3. Accurate tracking of both story choices and learning progress
4. Consistent user experience across the adventure

## Rule: Centralized State with `AdventureState` and `ChapterType`

* **No Ad-Hoc State:** Do not introduce state variables outside of the `AdventureState` model.
* **Comprehensive State:** All information related to story progression, user context, or educational tracking must be added as attributes to the `AdventureState` class.
* **WebSocket Synchronization:** State transitions, triggered by user actions, must be correctly implemented in the WebSocket message handling logic within `app/routers/websocket.py`. This ensures the client and server remain synchronized.
* **Linked File Updates:** Any modifications to state management (additions, removals, or updates to `AdventureState` or related logic) require corresponding updates in all linked files. Obsolete functions or classes must be updated or removed.
* **Authoritative Chapter Type:** Any logic that needs to distinguish between story chapters and lesson chapters *must* use the `ChapterType` enum. Do *not* rely on indirect inferences (e.g., checking the format of choice strings). The `ChapterData` model, which includes both `chapter_type` (the enum) and `chapter_content` (the chapter's content and choices), should be used for validation and logic related to chapter types.
* **Dynamic Story Length:** Story length is user-configurable and may change in future updates. NEVER hard-code assumptions about the number of chapters in any logic. Instead, use `state.story_length` and calculate proportions or progress based on percentages of total length.


## Rationale

* **Simplified Debugging:** Centralized state makes it easier to track down issues.
* **Enhanced Predictability:** The application's behavior is more predictable with a single source of truth for state.
* **Maintainability:** Centralized state simplifies reasoning about the application and makes future modifications easier.
* **Code Integrity:** Consistent updates across linked files prevent errors.
* **Type Safety and Clarity:** Using the `ChapterType` enum ensures type safety and makes the code's intent clear and unambiguous. It avoids fragile assumptions about data formats.

## Key Files

* **State Definition:** `app/models/story.py`
* **WebSocket Logic:** `app/routers/websocket.py`

