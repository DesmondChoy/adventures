# Cline Rules for Learning Odyssey

## Core Concepts

### Naming Conventions
1. Chapter: Unit of progression in ChapterType enum (LESSON, STORY, REFLECT, or CONCLUSION)
   - LESSON: Educational content from `lessons.csv` with LLM narrative wrapper using Story Object Method
   - STORY: Fully LLM-generated narrative content with choices, first chapter includes agency choice
   - REFLECT: Follow-up to LESSON chapters with narrative-driven approach to test deeper understanding
   - CONCLUSION: Final chapter with no choices, providing story resolution
2. State: Complete application state in `AdventureState` class
3. Adventure: Overall user journey tracked in `AdventureState`
4. Agency: User's first chapter choice that evolves throughout the adventure

### File Organization (`app/`)
1. Core application code:
   - State management: `models/story.py`
   - LLM integration: `services/llm/`
   - WebSocket components:
     * Routing: `routers/websocket_router.py`
     * Business logic: `services/websocket_service.py`
   - Chapter management: `services/chapter_manager.py`
   - Image generation: `services/image_generation_service.py`
2. Content sources:
   - Lesson database: `data/lessons.csv`
   - Story templates: `data/new_stories.yaml`
3. Tests: `tests/` directory
   - Story simulations: `tests/simulations/story_simulation.py`

### Critical Implementation Rules
1. State Management:
   - `AdventureState` MUST be single source of truth
   - NEVER hardcode chapter numbers (app logic may change)
   - Use `planned_chapter_types` for chapter progression
   - Implement logic on state properties, not assumptions
   - Complete state serialization required
   - Dynamic story length via `state.story_length` (between 5 and 10 chapters)
   - Type hints required for all state properties
   - State changes must be logged
   - Agency choice MUST be stored in `state.metadata["agency"]`

2. Chapter Requirements:
   - First chapter MUST be STORY type with agency choice
   - Second-to-last chapter MUST be STORY type (for pivotal choices)
   - Last chapter MUST be CONCLUSION type (for story resolution)
   - 50% of remaining chapters, rounded down, MUST be LESSON type (subject to available questions)
   - 50% of LESSON chapters, rounded down, MUST be followed by REFLECT chapters
   - REFLECT chapters MUST only occur immediately after a LESSON chapter
   - STORY chapters MUST follow REFLECT chapters
   - No consecutive LESSON chapters allowed (highest priority)
   - At least 1 REFLECT chapter in every scenario (required)
   - No question repetition in session
   - Answer options MUST be shuffled
   - Immediate feedback required
   - Error recovery for failed state updates

3. Agency Implementation:
   - First chapter MUST include agency choice from four categories
   - Agency MUST be referenced in all subsequent chapters
   - Agency MUST evolve in REFLECT chapters based on answers
   - Agency MUST play pivotal role in climax phase
   - Agency MUST have meaningful resolution in conclusion
   - Agency references MUST be tracked with `update_agency_references()`

4. Image Generation:
   - Use `GOOGLE_API_KEY` environment variable
   - Implement 5 retries with exponential backoff
   - Add robust null checking for API responses
   - Handle failed generation gracefully
   - Use asynchronous processing to maintain performance
   - Image prompt structure MUST follow this format:
     ```
     Fantasy illustration of [Agency Name] in [Story Name], [Visual Details], with [adventure_state.selected_sensory_details["visuals"]], [Base Style]
     ```
   - Extract agency name with visual details up to the closing bracket
   - Include story name from `state.metadata["non_random_elements"]["name"]`
   - Omit redundant descriptions that come after the dash

5. Data Model:
   - Story categories in `new_stories.yaml` MUST include `settings` (renamed from `setting_types`)
   - `story_rules` field has been removed from the data model
   - Required narrative elements are now only `settings` (validator updated in `story.py`)
   - System prompt template uses `settings` but no longer includes `story_rules`

6. File Encoding:
   - All YAML files in `app/data/stories/` MUST be opened with UTF-8 encoding
   - Use `encoding="utf-8"` parameter when opening files in `story_loader.py`
   - This ensures proper handling of special characters in story content
   - Default Windows encoding (cp1252) cannot handle certain special characters

## Development Workflow

### Code Changes
1. Question sampling changes need tests
2. Answer shuffling requires validation
3. State changes need synchronization
4. WebSocket changes need connection tests
5. Prompt changes need token usage evaluation
6. Image generation changes need error handling tests

### Testing Requirements
Run story simulation on changes to:
   - `app/services/llm/*`
   - `app/routers/websocket_router.py`
   - `app/services/websocket_service.py`
   - `app/services/chapter_manager.py`
   - `app/services/image_generation_service.py`
   - `app/models/story.py`
   - `app/init_data.py`
   - `app/data/new_stories.yaml`
   - `app/data/lessons.csv`
   - `app/templates/index.html`

## Testing and Debugging

### Subprocess Execution
1. Always use `sys.executable` instead of "python" when creating subprocess commands:
   ```python
   # Correct way to create a subprocess
   cmd = [sys.executable, "path/to/script.py"]
   
   # Incorrect way (may use wrong Python interpreter)
   cmd = ["python", "path/to/script.py"]
   ```
2. This ensures the subprocess uses the same Python interpreter as the main script, with access to all installed packages in the virtual environment.
3. This is particularly important for:
   - `run_simulation_tests.py` when running `story_simulation.py`
   - Any script that needs to execute Python code in a subprocess
   - Testing frameworks that spawn multiple processes

### Question Flow
1. Verify topic selection in `websocket_router.py`.
2. Check sampling logic in `chapter_manager.py`.
3. Confirm shuffle implementation in `chapter_manager.py`.
4. Validate answer tracking in `websocket_service.py`.
5. Verify question persistence in `adventure_state_manager.py`.
6. Test response creation in `websocket_service.py`.
7. Check state consistency in `adventure_state_manager.py`.
8. Monitor error handling.

### State Validation
1. Check question history in `AdventureState`.
2. Verify answer selections in `AdventureState`.
3. Validate chapter types in `AdventureState`.
4. Confirm state transitions in `adventure_state_manager.py`.
5. Test question persistence in `adventure_state_manager.py`.
6. Verify response handling in `websocket_service.py`.
7. Check error recovery in `adventure_state_manager.py`.
8. Monitor state consistency.
9. Verify agency tracking in `state.metadata["agency"]`.

### Response Chain
1. Verify question format in `websocket_service.py`.
2. Check answer order in `websocket_service.py`.
3. Validate feedback in `websocket_service.py`.
4. Confirm state updates in `adventure_state_manager.py`.
5. Test question handling in `websocket_service.py`.
6. Verify response creation in `websocket_service.py`.
7. Check "chapter" prefix removal in `websocket_service.py`:
   - Verify regex pattern `r"^Chapter(?:\s+\d+)?:?\s*"` catches all variations
   - Confirm removal in `process_choice()`, `stream_and_send_chapter()`, and `generate_chapter()`
   - Check capitalization of first letter after removal
8. Check error handling.
9. Monitor state consistency.
10. Verify agency evolution in REFLECT chapters.

### Prompt Debugging
1. Verify State Passing:
   - Check what properties are available in `AdventureState`.
   - Confirm they're being passed to prompt builder in `prompt_engineering.py`.
   - Verify they appear in final prompt.
2. Check Data Flow:
   - Trace data from state to prompt.
   - Look for optional parameters.
   - Verify history inclusion.
3. Analyze Prompt Content:
   - Review complete prompt output.
   - Check for missing context.
   - Verify continuity elements.
   - Confirm agency references.
4. Verify Adventure Topic Reference:
   - Confirm `state.metadata["non_random_elements"]["name"]` contains the adventure topic name.
   - Check that `_get_phase_guidance()` correctly replaces the {adventure_topic} placeholder in Exposition phase.
   - Verify the final prompt includes the specific adventure topic name in the world building section.

### Image Generation Debugging
1. Verify API Configuration:
   - Check `GOOGLE_API_KEY` environment variable.
   - Confirm API initialization in `image_generation_service.py`.
2. Check Request Flow:
   - Trace prompt construction.
   - Verify API call parameters.
   - Check response handling.
3. Analyze Error Handling:
   - Verify retry mechanism (5 retries with exponential backoff).
   - Check null response handling.
   - Confirm fallback behavior.
4. Agency Choice Visual Details:
   - Verify `categories` dictionary is exposed in `prompt_templates.py`.
   - Check agency name extraction from "As a..." choice texts in `enhance_prompt()`.
   - Confirm visual details extraction from square brackets.
   - Verify multi-stage matching approach in `websocket_service.py`:
     * Direct match with extracted agency name
     * Match with full choice text
     * Fallback to agency_lookup if direct category access fails
   - Check final prompt format includes visual details in square brackets.
5. Gender Consistency:
   - Verify choice text is passed to `enhance_prompt()`.
   - Check that narrative text with gender indicators is incorporated in image prompts.
   - Confirm generated images maintain gender consistency with narrative.

## Error Handling

### Question Errors
- Handle sampling failures in `chapter_manager.py`.
- Manage shuffle errors in `chapter_manager.py`.
- Track invalid answers in `websocket_service.py`.
- Log question issues in `chapter_manager.py`.
- Handle missing questions in `chapter_manager.py`.
- Recover from errors in `chapter_manager.py`.
- Maintain state consistency in `adventure_state_manager.py`.
- Log error details.

### State Errors
- Handle synchronization failures in `adventure_state_manager.py`.
- Implement recovery mechanisms in `adventure_state_manager.py`.
- Maintain error boundaries in `adventure_state_manager.py`.
- Log state transitions in `adventure_state_manager.py`.
- Handle question errors in `adventure_state_manager.py`.
- Recover from failures in `adventure_state_manager.py`.
- Ensure data consistency in `adventure_state_manager.py`.
- Monitor error patterns.

### WebSocket Errors
#### Router-Level Errors (`websocket_router.py`)
- Handle connection drops.
- Manage reconnection attempts.
- Log connection lifecycle events.
- Validate incoming messages.
- Coordinate error recovery with service.
- Monitor connection health.
- Handle client disconnects gracefully.
- Maintain connection state.

#### Service-Level Errors (`websocket_service.py`)
- Handle content generation failures.
- Manage state transitions.
- Process choice errors.
- Handle streaming issues.
- Validate message formats.
- Provide fallback responses.
- Maintain data consistency.
- Monitor processing health.

### Image Generation Errors
- Handle API failures in `image_generation_service.py`.
- Implement retry mechanism with exponential backoff.
- Add robust null checking for responses.
- Provide graceful degradation when images fail.
- Log detailed error information.
- Maintain text streaming performance.

## Documentation

- Type hints are required for all functions.
- Docstrings are mandatory for all classes and functions.
- State changes must be logged.
- Agency references must be tracked.
