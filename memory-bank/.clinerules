# Cline Rules for Learning Odyssey

## Core Concepts

### Naming Conventions
1. Chapter: Unit of progression in ChapterType enum (LESSON, STORY, REFLECT, CONCLUSION, or SUMMARY)
   - LESSON: Educational content from `lessons.csv` with LLM narrative wrapper using Story Object Method
   - STORY: Fully LLM-generated narrative content with choices, first chapter includes agency choice
   - REFLECT: Follow-up to LESSON chapters with narrative-driven approach to test deeper understanding
   - CONCLUSION: Final chapter with no choices, providing story resolution
   - SUMMARY: Special chapter that follows CONCLUSION, providing a recap of the adventure and learning journey
2. State: Complete application state in `AdventureState` class
3. Adventure: Overall user journey tracked in `AdventureState`
4. Agency: User's first chapter choice that evolves throughout the adventure

### File Organization (`app/`)
1. Core application code:
   - State management: `models/story.py`
   - LLM integration: `services/llm/`
   - WebSocket components:
     * Routing: `routers/websocket_router.py`
     * Business logic: `services/websocket_service.py`
   - Chapter management: `services/chapter_manager.py`
   - Image generation: `services/image_generation_service.py`
2. Content sources:
   - Lesson database: `data/lessons.csv`
   - Story data: `data/stories/*.yaml` (individual files for each story category)
   - Story loader: `data/story_loader.py`
3. Frontend components:
   - HTML: `templates/index.html`
   - CSS: `static/css/` (modular organization)
     * `layout.css`: Structural elements, containers, and screen transitions
     * `components.css`: Reusable UI components (toast notifications, buttons, loaders, choice cards, etc.)
     * `carousel-component.css`: Specialized carousel component styles
     * `theme.css`: Color scheme and theme variables
     * `typography.css`: Text styling and formatting
   - JavaScript: `static/js/`
     * `carousel-manager.js`: Reusable carousel component
     * `font-size-manager.js`: Text size adjustment for mobile
4. Tests: `tests/` directory
   - Story simulations: `tests/simulations/story_simulation.py`
   - Data tests: `tests/data/` (story loader, elements, chapter manager)

### LLM Service Provider Differences

1. Streaming Response Handling:
   - OpenAI and Gemini APIs handle streaming responses differently
   - For OpenAI: Async streaming works reliably with `async for chunk in response`
   - For Gemini: Direct API calls are more reliable than streaming for short responses
   - When implementing features that use LLM responses:
     * Check which service is being used: `isinstance(llm, LLMService) or "Gemini" in llm.__class__.__name__`
     * Implement service-specific handling for critical features
     * For short, single-response use cases (like summaries), prefer direct API calls with Gemini
     * For long, streaming responses, implement robust chunk collection

2. Error Handling Differences:
   - OpenAI errors typically include detailed error messages and status codes
   - Gemini errors may be less specific and require additional logging
   - Always implement robust fallback mechanisms for LLM-dependent features
   - Use try/except blocks with specific error types when possible
   - Log both the error type and message for debugging

3. Response Format Differences:
   - OpenAI responses typically follow requested formats more consistently
   - Gemini may require more explicit formatting instructions
   - When parsing responses, implement flexible parsing that can handle variations
   - Add validation to ensure critical information is extracted correctly
   - Consider using regex patterns that can handle different response structures

### Critical Implementation Rules
1. State Management:
   - `AdventureState` MUST be single source of truth
   - NEVER hardcode chapter numbers (app logic may change)
   - Use `planned_chapter_types` for chapter progression
   - Implement logic on state properties, not assumptions
   - Complete state serialization required
   - Dynamic story length via `state.story_length` (between 5 and 10 chapters)
   - Type hints required for all state properties
   - State changes must be logged
   - Agency choice MUST be stored in `state.metadata["agency"]`

2. Chapter Requirements:
   - First chapter MUST be STORY type with agency choice
   - Second-to-last chapter MUST be STORY type (for pivotal choices)
   - Last chapter MUST be CONCLUSION type (for story resolution)
   - 50% of remaining chapters, rounded down, MUST be LESSON type (subject to available questions)
   - 50% of LESSON chapters, rounded down, MUST be followed by REFLECT chapters
   - REFLECT chapters MUST only occur immediately after a LESSON chapter
   - STORY chapters MUST follow REFLECT chapters
   - No consecutive LESSON chapters allowed (highest priority)
   - At least 1 REFLECT chapter in every scenario (required)
   - No question repetition in session
   - Answer options MUST be shuffled
   - Immediate feedback required
   - Error recovery for failed state updates

3. Agency Implementation:
   - First chapter MUST include agency choice from four categories
   - Agency MUST be referenced in all subsequent chapters
   - Agency MUST evolve in REFLECT chapters based on answers
   - Agency MUST play pivotal role in climax phase
   - Agency MUST have meaningful resolution in conclusion
   - Agency references MUST be tracked with `update_agency_references()`

4. Image Generation:
   - Use `GOOGLE_API_KEY` environment variable
   - Implement 5 retries with exponential backoff
   - Add robust null checking for API responses
   - Handle failed generation gracefully
   - Use asynchronous processing to maintain performance
   - Image prompt structure MUST follow this format:
     ```
     Fantasy illustration of [Agency Name] in [Story Name], [Visual Details], with [adventure_state.selected_sensory_details["visuals"]], [Base Style]
     ```
   - Extract agency name with visual details up to the closing bracket
   - Include story name from `state.metadata["non_random_elements"]["name"]`
   - Omit redundant descriptions that come after the dash

5. Data Model:
   - Story categories in `new_stories.yaml` MUST include `settings` (renamed from `setting_types`)
   - `story_rules` field has been removed from the data model
   - Required narrative elements are now only `settings` (validator updated in `story.py`)
   - System prompt template uses `settings` but no longer includes `story_rules`

6. File Encoding:
   - All YAML files in `app/data/stories/` MUST be opened with UTF-8 encoding
   - Use `encoding="utf-8"` parameter when opening files in `story_loader.py`
   - This ensures proper handling of special characters in story content
   - Default Windows encoding (cp1252) cannot handle certain special characters

7. SUMMARY Chapter Implementation:
   - SUMMARY chapter MUST follow the CONCLUSION chapter
   - AdventureState MUST include a `chapter_summaries` field to store summaries
   - Chapter summaries MUST be generated progressively after each user choice
   - Use the existing `generate_chapter_summary` method from ImageGenerationService
   - Store summaries in the AdventureState's chapter_summaries list
   - Add error handling to ensure the main flow continues even if summary generation fails
   - The `generate_summary_content` function MUST use stored summaries when available
   - Include fallback to the original LLM-based summary generation if no summaries are available
   - Maintain backward compatibility with the existing summary functionality
   - Preserve chapter context by showing chapter numbers and types in the summary
   - Chapter summaries should NOT be artificially truncated - the full summary as generated by the LLM should be used
   - The LLM prompt (SUMMARY_CHAPTER_PROMPT) already guides the model to generate concise summaries (30-40 words)

8. Frontend Component Architecture:
   - Use modular JavaScript classes for UI components
   - Implement the Carousel class with these requirements:
     * Constructor must accept configuration options (elementId, itemCount, dataAttribute, inputId, onSelect)
     * Support keyboard, button, and touch controls
     * Implement proper event handling and cleanup
     * Use mobile-specific optimizations when needed
   - Follow CSS organization pattern:
     * Layout styles in layout.css (structural elements, containers, screen transitions)
     * Component styles in components.css (reusable UI components)
     * Specialized component styles in dedicated files (e.g., carousel-component.css)
     * Base styles in theme.css (colors, variables) and typography.css (text styling)
     * Mobile-specific styles with media queries
   - Maintain progressive enhancement:
     * Core functionality must work without JavaScript
     * Add enhanced features when JavaScript is available
     * Provide fallbacks for older browsers

## Documentation

- Type hints are required for all functions.
- Docstrings are mandatory for all classes and functions.
- State changes must be logged.
- Agency references must be tracked.
