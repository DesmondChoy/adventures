# Cline Rules for Learning Odyssey

## Core Concepts

### Naming Conventions
1. Chapter: Unit of progression in ChapterType enum (LESSON, STORY, or CONCLUSION)
   - LESSON: Educational content from `lessons.csv` with LLM narrative wrapper
   - STORY: Fully LLM-generated narrative content, guided by story elements from `new_stories.yaml`, with choices
   - CONCLUSION: Final chapter with no choices, providing story resolution
2. State: Complete application state in `AdventureState` class
3. Adventure: Overall user journey tracked in `AdventureState`

### File Organization (`app/`)
1. Core application code:
   - State management: `models/story.py`
   - LLM integration: `services/llm/`
   - WebSocket components:
     * Routing: `routers/websocket_router.py`
     * Business logic: `services/websocket_service.py`
   - Chapter management: `services/chapter_manager.py`
2. Content sources:
   - Lesson database: `data/lessons.csv`
   - Story templates: `data/new_stories.yaml`
3. Tests: `tests/` directory
   - Story simulations: `tests/simulations/story_simulation.py`

### Critical Implementation Rules
1. State Management:
   - `AdventureState` MUST be single source of truth
   - NEVER hardcode chapter numbers (app logic may change)
   - Use `planned_chapter_types` for chapter progression
   - Implement logic on state properties, not assumptions
   - Complete state serialization required
   - Dynamic story length via `state.story_length` (between 5 and 10 chapters)
   - Type hints required for all state properties
   - State changes must be logged

2. Chapter Requirements:
   - First two chapters MUST be STORY type (for setting/character development)
   - Second-to-last chapter MUST be STORY type (for pivotal choices)
   - Last chapter MUST be CONCLUSION type (for story resolution)
   - 50% of remaining chapters MUST be LESSON type (subject to available questions)
   - No question repetition in session
   - Answer options MUST be shuffled
   - Immediate feedback required
   - Error recovery for failed state updates

## Development Workflow

### Code Changes
1. Question sampling changes need tests
2. Answer shuffling requires validation
3. State changes need synchronization
4. WebSocket changes need connection tests

### Note: 2025-02-18
   - Story simulations should be run due to recent changes:
      * New chapter logic implementation (CONCLUSION type, updated sequencing)
      * Fixed `random.sample` error in `chapter_manager.py` when no questions available
      * Updated UI to handle CONCLUSION chapters
      * Enhanced prompt engineering for CONCLUSION narrative
   - Additional changes:
      * Updated story length options and constraints (5-10 chapters)
      * Fixed issue with missing choices in the first two chapters
      * Implemented comprehensive fix for "Chapter X:" prefixes in generated content

### Testing Requirements
Run story simulation on changes to:
   - `app/services/llm/*`
   - `app/routers/websocket_router.py`
   - `app/services/websocket_service.py`
   - `app/services/chapter_manager.py`
   - `app/models/story.py`
   - `app/init_data.py`
   - `app/data/new_stories.yaml`
   - `app/data/lessons.csv`
   - `app/templates/index.html`

## Testing and Debugging

### Question Flow
1. Verify topic selection in `websocket_router.py`.
2. Check sampling logic in `chapter_manager.py`.
3. Confirm shuffle implementation in `chapter_manager.py`.
4. Validate answer tracking in `websocket_service.py`.
5. Verify question persistence in `adventure_state_manager.py`.
6. Test response creation in `websocket_service.py`.
7. Check state consistency in `adventure_state_manager.py`.
8. Monitor error handling.

### State Validation
1. Check question history in `AdventureState`.
2. Verify answer selections in `AdventureState`.
3. Validate chapter types in `AdventureState`.
4. Confirm state transitions in `adventure_state_manager.py`.
5. Test question persistence in `adventure_state_manager.py`.
6. Verify response handling in `websocket_service.py`.
7. Check error recovery in `adventure_state_manager.py`.
8. Monitor state consistency.

### Response Chain
1. Verify question format in `websocket_service.py`.
2. Check answer order in `websocket_service.py`.
3. Validate feedback in `websocket_service.py`.
4. Confirm state updates in `adventure_state_manager.py`.
5. Test question handling in `websocket_service.py`.
6. Verify response creation in `websocket_service.py`.
7. Check error handling.
8. Monitor state consistency.

### Prompt Debugging
1. Verify State Passing:
   - Check what properties are available in `AdventureState`.
   - Confirm they're being passed to prompt builder in `prompt_engineering.py`.
   - Verify they appear in final prompt.
2. Check Data Flow:
   - Trace data from state to prompt.
   - Look for optional parameters.
   - Verify history inclusion.
3. Analyze Prompt Content:
   - Review complete prompt output.
   - Check for missing context.
   - Verify continuity elements.

## Error Handling

### Question Errors
- Handle sampling failures in `chapter_manager.py`.
- Manage shuffle errors in `chapter_manager.py`.
- Track invalid answers in `websocket_service.py`.
- Log question issues in `chapter_manager.py`.
- Handle missing questions in `chapter_manager.py`.
- Recover from errors in `chapter_manager.py`.
- Maintain state consistency in `adventure_state_manager.py`.
- Log error details.

### State Errors
- Handle synchronization failures in `adventure_state_manager.py`.
- Implement recovery mechanisms in `adventure_state_manager.py`.
- Maintain error boundaries in `adventure_state_manager.py`.
- Log state transitions in `adventure_state_manager.py`.
- Handle question errors in `adventure_state_manager.py`.
- Recover from failures in `adventure_state_manager.py`.
- Ensure data consistency in `adventure_state_manager.py`.
- Monitor error patterns.

### WebSocket Errors
#### Router-Level Errors (`websocket_router.py`)
- Handle connection drops.
- Manage reconnection attempts.
- Log connection lifecycle events.
- Validate incoming messages.
- Coordinate error recovery with service.
- Monitor connection health.
- Handle client disconnects gracefully.
- Maintain connection state.

#### Service-Level Errors (`websocket_service.py`)
- Handle content generation failures.
- Manage state transitions.
- Process choice errors.
- Handle streaming issues.
- Validate message formats.
- Provide fallback responses.
- Maintain data consistency.
- Monitor processing health.

#### Cross-Component Errors
- Coordinate error recovery between `websocket_router.py` and `websocket_service.py`.
- Maintain state synchronization.
- Handle timing issues.
- Log error chains.
- Implement retry strategies.
- Ensure message ordering.
- Preserve transaction integrity.
- Monitor system boundaries.

### Prompt Errors
- Log complete prompt content in `prompt_engineering.py`.
- Track missing state data in `prompt_engineering.py`.
- Monitor continuity breaks in `prompt_engineering.py`.
- Validate data flow in `prompt_engineering.py`.
- Handle question errors.
- Recover from failures.
- Ensure consistency.
- Monitor error patterns.

## Documentation

- Type hints are required for all functions.
- Docstrings are mandatory for all classes and functions.
- State changes must be logged.
