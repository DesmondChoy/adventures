# Cline Rules for Learning Odyssey

## Critical Implementation Rules

### 1. State Management
- `AdventureState` MUST be single source of truth
- NEVER hardcode chapter numbers (app logic may change)
- Use `planned_chapter_types` for chapter progression
- Implement logic on state properties, not assumptions
- Complete state serialization required
- Dynamic story length via `state.story_length`
- Type hints required for all state properties
- State changes must be logged
- Agency choice MUST be stored in `state.metadata["agency"]`
- When extending Pydantic models:
  * New fields MUST be properly defined using Pydantic's Field
  * Example: `new_field: Dict[str, Any] = Field(default_factory=dict, description="...")`
  * Initialize fields in __init__ method by adding to kwargs before calling super().__init__
  * Add null checking for all field operations
  * Use proper type hints for all fields
- Case Sensitivity in Chapter Types:
  * Always convert to lowercase when storing or retrieving
  * When comparing chapter types, use lowercase values
  * When reconstructing state from storage, convert all chapter types to lowercase
  * Special handling for the last chapter to ensure it's always a CONCLUSION chapter

### 2. Chapter Requirements
- First chapter MUST be STORY type with agency choice
- Second-to-last chapter MUST be STORY type (for pivotal choices)
- Last chapter MUST be CONCLUSION type (for story resolution)
- 50% of remaining chapters, rounded down, MUST be LESSON type
- 50% of LESSON chapters, rounded down, MUST be followed by REFLECT chapters
- REFLECT chapters MUST only occur immediately after a LESSON chapter
- STORY chapters MUST follow REFLECT chapters
- No consecutive LESSON chapters allowed
- At least 1 REFLECT chapter in every scenario
- No question repetition in session
- Answer options MUST be shuffled
- Immediate feedback required
- Error recovery for failed state updates

### 3. Agency Implementation
- First chapter MUST include agency choice from four categories
- Agency MUST be referenced in all subsequent chapters
- Agency MUST evolve in REFLECT chapters based on answers
- Agency MUST play pivotal role in climax phase
- Agency MUST have meaningful resolution in conclusion
- Agency references MUST be tracked with `update_agency_references()`

### 4. Image Generation
- Use `GOOGLE_API_KEY` environment variable
- Implement 5 retries with exponential backoff
- Add robust null checking for API responses
- Handle failed generation gracefully
- Use asynchronous processing to maintain performance
- Separate content generation for different purposes:
  * Use `generate_chapter_summary()` for narrative summaries (70-100 words)
  * Use `generate_image_scene()` for visual scene descriptions (20-30 words)
- Store complete agency information during Chapter 1 choice selection
- Image prompt structure MUST follow this format:
  ```
  Colorful storybook illustration of this scene: [Chapter Summary]. [Agency Prefix] [Agency Name] ([Visual Details])
  ```
- Use category-specific prefixes for agency representation:
  * For companions: "He/she is accompanied by"
  * For professions: "He/she is a"
  * For abilities: "He/she has the power of"
  * For artifacts: "He/she is wielding"

### 5. User Preference Patterns
- Visual consistency is critical for engagement
- Character appearance must stay consistent unless explicitly evolved
- Educational content must be seamlessly integrated within narrative
- Agency evolution must be visibly reflected throughout adventure
- Children expect detailed, clear visual descriptions
- Clear feedback needed for educational questions
- Completion chapter must provide satisfying resolution
- Summary chapter should reinforce both story events and learning

### 6. Project-Specific Patterns
- Focus on child-friendly language and imagery
- Balance entertainment and education
- Provide scaffolded learning through narrative context
- Create a sense of agency and ownership for the user
- Incorporate visual details to enhance imagination
- Present educational content through Story Object Method
- Maintain consistent narrative voice throughout
- Ensure educational explanations are age-appropriate (6-12)

### 7. Known Challenges
- LLM response formatting varies between providers
- Image generation quality varies based on prompt structure
- Chapter state sharing requires singleton pattern
- Case sensitivity issues when reconstructing state
- WebSocket disconnections during page navigation
- Race conditions with asynchronous operations
- Memory leaks with long-lived connections
- Placeholder text appearing in simulation logs

### 8. Tool Usage Patterns
- Wrap `sys.executable` in subprocess calls (not hardcoded "python")
- Use detailed logging with context (chapter, state ID, etc.)
- Implement exponential backoff for retries
- Use structured data in log entries
- Add verification points throughout critical paths
- Implement graceful degradation for service failures
- Define specific error types for different failure scenarios
- Use dependency injection for better testability